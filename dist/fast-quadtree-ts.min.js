/**
   * @license
   * author: https://github.com/huxia
   * fast_quadtree_ts.js v0.0.7
   * Released under the MIT license.
   */
var fast_quadtree_ts=function(e){"use strict";var t,s,i;e.Collection=void 0,(t=e.Collection||(e.Collection={})).toArray=function(e){if(e instanceof Array)return e;const t=[];if(e[Symbol.iterator]){for(const s of e)t.push(s);return t}let s=e.next();for(;!s.done;)t.push(s.value),s=e.next();return t},t.toIterable=function*(...e){for(const t of e){if(!t)continue;const e=t();if(e instanceof Array)for(const t of e)yield t;else{let t=e.next();for(;!t.done;)yield t.value,t=e.next()}}},t.toIterableWithFilter=function*(e,...t){for(const s of t){if(!s)continue;const t=s();if(t instanceof Array)for(const s of t)e&&!e(s)||(yield s);else{let s=t.next();for(;!s.done;)e&&!e(s.value)||(yield s.value),s=t.next()}}},t.toIterableWithMap=function*(e,...t){for(const s of t){if(!s)continue;const t=s();if(t instanceof Array)for(const s of t)yield e(s);else{let s=t.next();for(;!s.done;)yield e(s.value),s=t.next()}}},e.AABB=void 0,(s=e.AABB||(e.AABB={})).overlapsVec=function(e,t){return e.center.x-e.size.x<=t.x&&t.x<=e.center.x+e.size.x&&e.center.y-e.size.y<=t.y&&t.y<=e.center.y+e.size.y},s.overlapsAABB=function(e,t){return!(t.center.x-t.size.x>e.center.x+e.size.x||t.center.x+t.size.x<e.center.x-e.size.x||t.center.y-t.size.y>e.center.y+e.size.y||t.center.y+t.size.y<e.center.y-e.size.y)},e.Shape=void 0,(i=e.Shape||(e.Shape={})).overlapsVec=function(t,s){switch(t.type){case"rectangle":return e.AABB.overlapsVec(t,s);case"square":return e.AABB.overlapsVec({center:t.center,size:{x:t.size,y:t.size}},s);case"circle":return i.overlapsVec({type:"ellipse",center:t.center,size:{x:t.size,y:t.size}},s);case"ellipse":return Math.pow(s.x-t.center.x,2)/Math.pow(t.size.x,2)+Math.pow(s.y-t.center.y,2)/Math.pow(t.size.y,2)<=1;default:throw new Error("not implemented")}},i.possiblelyOverlapsAABB=function(t,s){switch(t.type){case"ellipse":case"rectangle":return e.AABB.overlapsAABB(t,s);case"circle":case"square":return e.AABB.overlapsAABB({center:t.center,size:{x:t.size,y:t.size}},s);default:throw new Error("not implemented")}},i.createRectangle=function(e,t){return"number"==typeof t?{type:"square",center:e,size:t}:{type:"rectangle",center:e,size:t}},i.createEllipse=function(e,t){return"number"==typeof t?{type:"circle",center:e,size:t}:{type:"ellipse",center:e,size:t}};class r{static MaxElements=8;static MaxDepth=8;static UniqueUnitAtPositionKeyFunc=(e,t,s)=>s.options.integerCoordinate?e.x+2*s.bounds.size.x*e.y:`${e.x},${e.y}`;bounds;depth;divided;units;northWest;northEast;southWest;southEast;size;options;constructor(e,t,s=0){this.bounds=e,this.depth=s,this.divided=!1,this.units={},this.size=0,this.options=t||{unitKeyGetter:r.UniqueUnitAtPositionKeyFunc}}_add(t,s){if(!e.AABB.overlapsVec(this.bounds,t))return!1;if(this.depth==r.MaxDepth||!this.divided&&this.size<r.MaxElements){const e=this.options.unitKeyGetter(t,s,this);let i="existing";return this.units[e]||(this.size++,i="added"),this.units[e]={vec:t,unit:s},i}this.divided||this.divide();const i=this.northWest._add(t,s)||this.northEast._add(t,s)||this.southWest._add(t,s)||this.southEast._add(t,s);return"added"===i&&this.size++,i}add(e,t){return!!this._add(e,t)}_move(t,s,i){if(!e.AABB.overlapsVec(this.bounds,t))return!1;if(!this.divided){const r=this.options.unitKeyGetter(t,i,this);if(!this.units[r])return!1;if(s&&e.AABB.overlapsVec(this.bounds,s)){const e=this.options.unitKeyGetter(s,i,this);return e!==r?(delete this.units[r],this.units[e]={vec:s,unit:i}):this.units[r]={vec:s,unit:i},"moved"}return delete this.units[r],this.size--,"removed"}const r=this.northWest._move(t,s,i)||this.northEast._move(t,s,i)||this.southWest._move(t,s,i)||this.southEast._move(t,s,i);return"removed"===r&&(this.size--,s)?this.add(s,i)?"moved":"removed":r}move(t,s,i){if(!e.AABB.overlapsVec(this.bounds,s))return!1;if("removed"===this._move(t,s,i))throw new Error("unexpected");return!0}delete(e,t){return"removed"===this._move(e,void 0,t)}clear(){this.units={},this.size=0,this.divided=!1,this.northWest=this.northEast=this.southWest=this.southEast=void 0}has(t,s){if(!e.AABB.overlapsVec(this.bounds,t))return!1;if(!this.divided){const e=this.options.unitKeyGetter(t,s,this);return!!this.units[e]}return this.northWest.has(t,s)||this.northEast.has(t,s)||this.southWest.has(t,s)||this.southEast.has(t,s)}divide(){this.divided=!0;const e=this.bounds.size.x/2,t=this.bounds.size.y/2;this.northWest=new r({center:{x:this.bounds.center.x-e,y:this.bounds.center.y-t},size:{x:e,y:t}},this.options,this.depth+1),this.northEast=new r({center:{x:this.bounds.center.x+e,y:this.bounds.center.y-t},size:{x:e,y:t}},this.options,this.depth+1),this.southWest=new r({center:{x:this.bounds.center.x-e,y:this.bounds.center.y+t},size:{x:e,y:t}},this.options,this.depth+1),this.southEast=new r({center:{x:this.bounds.center.x+e,y:this.bounds.center.y+t},size:{x:e,y:t}},this.options,this.depth+1);for(const{vec:e,unit:t}of Object.values(this.units))this.northWest.add(e,t)||this.northEast.add(e,t)||this.southWest.add(e,t)||this.southEast.add(e,t);this.units={}}queryIteratable(t,s){const i="function"==typeof t?t:void 0;if(s&&!e.Shape.possiblelyOverlapsAABB(s,this.bounds))return[];if(!this.divided){let t=Object.values(this.units);return s&&(t=t.filter((t=>e.Shape.overlapsVec(s,t.vec)))),i?t.map(i):t}return i?e.Collection.toIterableWithMap(i,(()=>this.northWest.queryIteratable(s)),(()=>this.northEast.queryIteratable(s)),(()=>this.southWest.queryIteratable(s)),(()=>this.southEast.queryIteratable(s))):e.Collection.toIterable((()=>this.northWest.queryIteratable(s)),(()=>this.northEast.queryIteratable(s)),(()=>this.southWest.queryIteratable(s)),(()=>this.southEast.queryIteratable(s)))}_queryReduce(t,s,i){if(t&&!e.Shape.possiblelyOverlapsAABB(t,this.bounds))return i;if(!this.divided){let r=Object.values(this.units);return t&&(r=r.filter((s=>e.Shape.overlapsVec(t,s.vec)))),r.reduce(s,i)}let r=i;return r=this.northWest._queryReduce(t,s,r),r=this.northEast._queryReduce(t,s,r),r=this.southWest._queryReduce(t,s,r),r=this.southEast._queryReduce(t,s,r),r}queryReduce(e,t,s){return"function"==typeof e?this._queryReduce(void 0,e,t):this._queryReduce(e,t,s)}queryArray(e){return this._queryReduce(e,((e,t)=>(e.push(t),e)),[])}queryForEach(e,t){if("function"==typeof e)this._queryReduce(void 0,((t,s,i)=>e(s,i)));else{if(!t)return;this._queryReduce(e,((e,s,i)=>t(s,i)))}}queryMap(e,t){return"function"==typeof e?t?this._queryReduce(void 0,((t,s,i)=>(t.push(e(s,i)),t)),[]):[]:t?this._queryReduce(e,((e,s,i)=>(e.push(t(s,i)),e)),[]):[]}_dumpToString(e){const t="            ".substring(0,this.depth);if(!this.divided)return e.push(t),e.push(JSON.stringify(this.units)),e.push("\n"),e;for(const s of[{str:"NW",qt:this.northWest},{str:"NE",qt:this.northEast},{str:"SW",qt:this.southWest},{str:"SE",qt:this.southEast}])e.push(t),e.push(s.str),e.push(` (${s.qt.size}):\n`),s.qt._dumpToString(e);return e}toString(){return this._dumpToString([]).join("")}}class n extends Error{constructor(e){super(e)}}class o{static UniqueUnitAtVecKeyFunc=r.UniqueUnitAtPositionKeyFunc;quardTree;unitPositionGetter;constructor(e,t){this.quardTree=new r(e,t),this.unitPositionGetter=t.unitPositionGetter}get size(){return this.quardTree.size}get bounds(){return this.quardTree.bounds}add(e){const t=this.unitPositionGetter(e);if(!this.quardTree.add(t,e))throw new n(`position ${JSON.stringify(t)} is out of bounds: ${JSON.stringify(this.quardTree.bounds)}`);return this}move(e,t){return this.quardTree.move(this.unitPositionGetter(e),t,e)}delete(e){return this.quardTree.delete(this.unitPositionGetter(e),e)}has(e){return this.quardTree.has(this.unitPositionGetter(e),e)}clear(){this.quardTree.clear()}forEach(e){return this.quardTree.queryReduce(((t,s)=>e(s.unit,s.unit,this)))}entries(){return this.quardTree.queryIteratable((e=>[e.unit,e.unit]))}keys(){return this.values()}values(){return this.quardTree.queryIteratable((e=>e.unit))}get[Symbol.toStringTag](){return this.quardTree.toString()}[Symbol.iterator](){return this.values()}queryIteratable(e){return this.quardTree.queryIteratable(e)}queryReduce(e,t,s){return this.quardTree.queryReduce(e,t,s)}queryArray(e){return this.quardTree.queryArray(e)}queryForEach(e,t){this.quardTree.queryForEach(e,t)}queryMap(e,t){return this.quardTree.queryMap(e,t)}}return e.QuadTree=r,e.QuadTreeSet=o,Object.defineProperty(e,"__esModule",{value:!0}),e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
