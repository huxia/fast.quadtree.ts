/**
   * @license
   * author: https://github.com/huxia
   * fast_quadtree_ts.js v0.1.2
   * Released under the MIT license.
   */
var fast_quadtree_ts=function(e){"use strict";var t,i,s;e.Collection=void 0,(t=e.Collection||(e.Collection={})).toArray=function(e){if(e instanceof Array)return e;const t=[];if(e[Symbol.iterator]){for(const i of e)t.push(i);return t}let i=e.next();for(;!i.done;)t.push(i.value),i=e.next();return t},t.toIterable=function*(...e){for(const t of e){if(!t)continue;const e="function"==typeof t?t():t;if(e instanceof Array)for(const t of e)yield t;else{let t=e.next();for(;!t.done;)yield t.value,t=e.next()}}},t.toIterableWithFilter=function*(e,t,...i){if(e)for(const s of i){if(!s)continue;const i="function"==typeof s?s():s;if(i instanceof Array)for(const s of i)e(s,t.index++)&&(yield s);else{let s=i.next();for(;!s.done;)e(s.value,t.index++)&&(yield s.value),s=i.next()}}else for(const e of i){if(!e)continue;const i="function"==typeof e?e():e;if(i instanceof Array)for(const e of i)yield e,t.index++;else{let e=i.next();for(;!e.done;)yield e.value,e=i.next(),t.index++}}},t.toIterableWithMap=function*(e,t,...i){for(const s of i){if(!s)continue;const i="function"==typeof s?s():s;if(i instanceof Array)for(const s of i)yield e(s,t.index++);else{let s=i.next();for(;!s.done;)yield e(s.value,t.index++),s=i.next()}}},t.objectValuesToIterable=function*(e,t,i,s){if(t)if(i)for(const r in e){const n=e[r];t(n,s.index)&&(yield i(n,s.index++))}else for(const i in e){const r=e[i];t(r,s.index)&&(yield r,s.index++)}else if(i)for(const t in e)yield i(e[t],s.index++);else for(const t in e)yield e[t],s.index++},e.AABB=void 0,(i=e.AABB||(e.AABB={})).overlapsVec=function(e,t){return e.center.x-e.size.x<=t.x&&t.x<=e.center.x+e.size.x&&e.center.y-e.size.y<=t.y&&t.y<=e.center.y+e.size.y},i.overlapsAABB=function(e,t){return!(t.center.x-t.size.x>e.center.x+e.size.x||t.center.x+t.size.x<e.center.x-e.size.x||t.center.y-t.size.y>e.center.y+e.size.y||t.center.y+t.size.y<e.center.y-e.size.y)},e.Shape=void 0,(s=e.Shape||(e.Shape={})).overlapsVec=function(t,i){switch(t.type){case"rectangle":return e.AABB.overlapsVec(t,i);case"square":return e.AABB.overlapsVec({center:t.center,size:{x:t.size,y:t.size}},i);case"circle":return s.overlapsVec({type:"ellipse",center:t.center,size:{x:t.size,y:t.size}},i);case"ellipse":return Math.pow(i.x-t.center.x,2)/Math.pow(t.size.x,2)+Math.pow(i.y-t.center.y,2)/Math.pow(t.size.y,2)<=1;default:throw new Error("not implemented")}},s.possiblelyOverlapsAABB=function(t,i){switch(t.type){case"ellipse":case"rectangle":return e.AABB.overlapsAABB(t,i);case"circle":case"square":return e.AABB.overlapsAABB({center:t.center,size:{x:t.size,y:t.size}},i);default:throw new Error("not implemented")}},s.createRectangle=function(e,t){return"number"==typeof t?{type:"square",center:e,size:t}:{type:"rectangle",center:e,size:t}},s.createEllipse=function(e,t){return"number"==typeof t?{type:"circle",center:e,size:t}:{type:"ellipse",center:e,size:t}};class r{get size(){return this._size}constructor(e,t,i=0){this.bounds=e,this.depth=i,this.divided=!1,this.units={},this._size=0,this.options={unitKeyGetter:(null==t?void 0:t.unitKeyGetter)||r.UniqueUnitAtPositionKeyFunc}}_add(t,i){if(!e.AABB.overlapsVec(this.bounds,t))return!1;if(this.depth==r.MaxDepth||!this.divided&&this.size<r.MaxElements){const e=this.options.unitKeyGetter(t,i,this);let s="existing";return this.units[e]||(this._size++,s="added"),this.units[e]={vec:t,unit:i},s}this.divided||this.divide();const s=this.northWest._add(t,i)||this.northEast._add(t,i)||this.southWest._add(t,i)||this.southEast._add(t,i);return"added"===s&&this._size++,s}add(e,t){return!!this._add(e,t)}_move(t,i,s){if(!e.AABB.overlapsVec(this.bounds,t))return!1;if(!this.divided){const r=this.options.unitKeyGetter(t,s,this);if(!this.units[r])return!1;if(i&&e.AABB.overlapsVec(this.bounds,i)){const e=this.options.unitKeyGetter(i,s,this);return e!==r?(delete this.units[r],this.units[e]={vec:i,unit:s}):this.units[r]={vec:i,unit:s},"moved"}return delete this.units[r],this._size--,"removed"}const r=this.northWest._move(t,i,s)||this.northEast._move(t,i,s)||this.southWest._move(t,i,s)||this.southEast._move(t,i,s);return"removed"===r&&(this._size--,i)?this.add(i,s)?"moved":"removed":r}move(t,i,s){if(!e.AABB.overlapsVec(this.bounds,i))return!1;if("removed"===this._move(t,i,s))throw new Error("unexpected");return!0}delete(e,t){return"removed"===this._move(e,void 0,t)}clear(){this.units={},this._size=0,this.divided=!1,this.northWest=this.northEast=this.southWest=this.southEast=void 0}has(t,i){if(!e.AABB.overlapsVec(this.bounds,t))return!1;if(!this.divided){const e=this.options.unitKeyGetter(t,i,this);return!!this.units[e]}return this.northWest.has(t,i)||this.northEast.has(t,i)||this.southWest.has(t,i)||this.southEast.has(t,i)}divide(){this.divided=!0;const e=this.bounds.size.x/2,t=this.bounds.size.y/2;this.northWest=new r({center:{x:this.bounds.center.x-e,y:this.bounds.center.y-t},size:{x:e,y:t}},this.options,this.depth+1),this.northEast=new r({center:{x:this.bounds.center.x+e,y:this.bounds.center.y-t},size:{x:e,y:t}},this.options,this.depth+1),this.southWest=new r({center:{x:this.bounds.center.x-e,y:this.bounds.center.y+t},size:{x:e,y:t}},this.options,this.depth+1),this.southEast=new r({center:{x:this.bounds.center.x+e,y:this.bounds.center.y+t},size:{x:e,y:t}},this.options,this.depth+1);for(const e in this.units){const{vec:t,unit:i}=this.units[e];this.northWest.add(t,i)||this.northEast.add(t,i)||this.southWest.add(t,i)||this.southEast.add(t,i)}this.units={}}_queryIteratable(t,i,s){return t&&!e.Shape.possiblelyOverlapsAABB(t,this.bounds)?[]:this.divided?i?e.Collection.toIterableWithMap(i,s,this.northWest._queryIteratable(t,void 0,s),this.northEast._queryIteratable(t,void 0,s),this.southWest._queryIteratable(t,void 0,s),this.southEast._queryIteratable(t,void 0,s)):e.Collection.toIterable(this.northWest._queryIteratable(t,void 0,s),this.northEast._queryIteratable(t,void 0,s),this.southWest._queryIteratable(t,void 0,s),this.southEast._queryIteratable(t,void 0,s)):e.Collection.objectValuesToIterable(this.units,t?i=>e.Shape.overlapsVec(t,i.vec):void 0,i,s)}queryIteratable(e,t){return"function"==typeof e?this._queryIteratable(t,e,{index:0}):this._queryIteratable(e,void 0,{index:0})}_queryReduce(t,i,s,r){if(t&&!e.Shape.possiblelyOverlapsAABB(t,this.bounds))return s;let n=s;if(!this.divided){if(t)for(const s in this.units){const o=this.units[s];e.Shape.overlapsVec(t,o.vec)&&(n=i(n,o,r.index++))}else for(const e in this.units){n=i(n,this.units[e],r.index++)}return n}return n=this.northWest._queryReduce(t,i,n,r),n=this.northEast._queryReduce(t,i,n,r),n=this.southWest._queryReduce(t,i,n,r),n=this.southEast._queryReduce(t,i,n,r),n}queryReduce(e,t,i){return"function"==typeof e?this._queryReduce(void 0,e,t,{index:0}):this._queryReduce(e,t,i,{index:0})}queryArray(e){return this._queryReduce(e,((e,t)=>(e.push(t),e)),[],{index:0})}queryForEach(e,t){if("function"==typeof e)this._queryReduce(void 0,((t,i,s)=>e(i,s)),void 0,{index:0});else{if(!t)return;this._queryReduce(e,((e,i,s)=>t(i,s)),void 0,{index:0})}}queryMap(e,t){return"function"==typeof e?t?this._queryReduce(void 0,((t,i,s)=>(t.push(e(i,s)),t)),[],{index:0}):[]:t?this._queryReduce(e,((e,i,s)=>(e.push(t(i,s)),e)),[],{index:0}):[]}querySize(e){return this._queryReduce(e,(e=>e+1),0,{index:0})}_dumpToString(e){const t="            ".substring(0,this.depth);if(!this.divided)return e.push(t),e.push(JSON.stringify(this.units)),e.push("\n"),e;for(const i of[{str:"NW",qt:this.northWest},{str:"NE",qt:this.northEast},{str:"SW",qt:this.southWest},{str:"SE",qt:this.southEast}])e.push(t),e.push(i.str),e.push(` (${i.qt.size}):\n`),i.qt._dumpToString(e);return e}toString(){return this._dumpToString([]).join("")}}r.MaxElements=8,r.MaxDepth=8,r.UniqueUnitAtPositionKeyFunc=(e,t,i)=>`${e.x},${e.y}`;class n extends Error{constructor(e){super(e)}}class o{constructor(e,t){this.quardTree=new r(e,t),this.unitPositionGetter=t.unitPositionGetter}get size(){return this.quardTree.size}get bounds(){return this.quardTree.bounds}add(e){const t=this.unitPositionGetter(e);if(!this.quardTree.add(t,e))throw new n(`position ${JSON.stringify(t)} is out of bounds: ${JSON.stringify(this.quardTree.bounds)}`);return this}move(e,t){return this.quardTree.move(this.unitPositionGetter(e),t,e)}delete(e){return this.quardTree.delete(this.unitPositionGetter(e),e)}has(e){return this.quardTree.has(this.unitPositionGetter(e),e)}clear(){this.quardTree.clear()}forEach(e,t){return this.quardTree.queryReduce(((i,s)=>{e(s.unit,s.unit,t)}),void 0)}entries(){return this.quardTree.queryIteratable((e=>[e.unit,e.unit]))}keys(){return this.values()}values(){return this.quardTree.queryIteratable((e=>e.unit))}get[Symbol.toStringTag](){return this.quardTree.toString()}[Symbol.iterator](){return this.values()}queryIteratable(e){return this.quardTree.queryIteratable(e)}queryReduce(e,t,i){return this.quardTree.queryReduce(e,t,i)}queryArray(e){return this.quardTree.queryArray(e)}queryForEach(e,t){this.quardTree.queryForEach(e,t)}queryMap(e,t){return this.quardTree.queryMap(e,t)}querySize(e){return this.quardTree.querySize(e)}}return o.UniqueUnitAtVecKeyFunc=r.UniqueUnitAtPositionKeyFunc,e.QuadTree=r,e.QuadTreeSet=o,Object.defineProperty(e,"__esModule",{value:!0}),e}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
