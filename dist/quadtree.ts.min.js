/**
   * @license
   * author: https://github.com/huxia
   * fast.quadtree.ts.js v0.0.1
   * Released under the MIT license.
   */
this.fast=this.fast||{},this.fast.quadtree=this.fast.quadtree||{},this.fast.quadtree.ts=function(){"use strict";var t,e,s;!function(t){t.toArray=function(t){if(t instanceof Array)return t;const e=[];if(t[Symbol.iterator]){for(const s of t)e.push(s);return e}let s=t.next();for(;!s.done;)e.push(s.value),s=t.next();return e},t.toIterable=function*(...t){for(const e of t){if(!e)continue;const t=e();if(t instanceof Array)for(const e of t)yield e;else{let e=t.next();for(;!e.done;)yield e.value,e=t.next()}}},t.toIterableWithFilter=function*(t,...e){for(const s of e){if(!s)continue;const e=s();if(e instanceof Array)for(const s of e)t&&!t(s)||(yield s);else{let s=e.next();for(;!s.done;)t&&!t(s.value)||(yield s.value),s=e.next()}}},t.toIterableWithMap=function*(t,...e){for(const s of e){if(!s)continue;const e=s();if(e instanceof Array)for(const s of e)yield t(s);else{let s=e.next();for(;!s.done;)yield t(s.value),s=e.next()}}}}(t||(t={})),function(t){t.overlapsVec=function(t,e){return t.center.x-t.size.x<=e.x&&e.x<=t.center.x+t.size.x&&t.center.y-t.size.y<=e.y&&e.y<=t.center.y+t.size.y},t.overlapsAABB=function(t,e){return!(e.center.x-e.size.x>t.center.x+t.size.x||e.center.x+e.size.x<t.center.x-t.size.x||e.center.y-e.size.y>t.center.y+t.size.y||e.center.y+e.size.y<t.center.y-t.size.y)}}(e||(e={})),function(t){t.overlapsVec=function(s,i){switch(s.type){case"rectangle":return e.overlapsVec(s,i);case"square":return e.overlapsVec({center:s.center,size:{x:s.size,y:s.size}},i);case"circle":return t.overlapsVec({type:"ellipse",center:s.center,size:{x:s.size,y:s.size}},i);case"ellipse":return Math.pow(i.x-s.center.x,2)/Math.pow(s.size.x,2)+Math.pow(i.y-s.center.y,2)/Math.pow(s.size.y,2)<=1;default:throw new Error("not implemented")}},t.possiblelyOverlapsAABB=function(t,s){switch(t.type){case"ellipse":case"rectangle":return e.overlapsAABB(t,s);case"circle":case"square":return e.overlapsAABB({center:t.center,size:{x:t.size,y:t.size}},s);default:throw new Error("not implemented")}},t.createRectangle=function(t,e){return"number"==typeof e?{type:"square",center:t,size:e}:{type:"rectangle",center:t,size:e}},t.createEllipse=function(t,e){return"number"==typeof e?{type:"circle",center:t,size:e}:{type:"ellipse",center:t,size:e}}}(s||(s={}));class i{static MaxElements=8;static MaxDepth=8;static UniqueUnitAtPositionKeyFunc=(t,e,s)=>s.options.integerCoordinate?t.x+2*s.bounds.size.x*t.y:`${t.x},${t.y}`;bounds;depth;divided;units;northWest;northEast;southWest;southEast;size;options;constructor(t,e,s=0){this.bounds=t,this.depth=s,this.divided=!1,this.units={},this.size=0,this.options=e||{unitKeyGetter:i.UniqueUnitAtPositionKeyFunc}}add(t,s){if(!e.overlapsVec(this.bounds,t))return!1;if(this.depth==i.MaxDepth||!this.divided&&this.size<i.MaxElements){const e=this.options.unitKeyGetter(t,s,this);return this.units[e]||this.size++,this.units[e]={vec:t,unit:s},!0}this.divided||this.divide();const r=this.northWest.add(t,s)||this.northEast.add(t,s)||this.southWest.add(t,s)||this.southEast.add(t,s);return r&&this.size++,r}_move(t,s,i){if(!e.overlapsVec(this.bounds,t))return!1;if(!this.divided){const r=this.options.unitKeyGetter(t,i,this);return!!this.units[r]&&(s&&e.overlapsVec(this.bounds,s)?(this.units[r]={vec:s,unit:i},"moved"):(delete this.units[r],this.size--,"removed"))}const r=this.northWest._move(t,s,i)||this.northEast._move(t,s,i)||this.southWest._move(t,s,i)||this.southEast._move(t,s,i);return s&&"removed"===r?(this.size--,this.add(s,i)?"moved":"removed"):r}move(t,s,i){if(!e.overlapsVec(this.bounds,s))return!1;if("removed"===this._move(t,s,i))throw new Error("unexpected");return!0}delete(t,e){return"removed"===this._move(t,void 0,e)}clear(){this.units={},this.size=0,this.divided=!1,this.northWest=this.northEast=this.southWest=this.southEast=void 0}has(t,s){if(!e.overlapsVec(this.bounds,t))return!1;if(!this.divided){const e=this.options.unitKeyGetter(t,s,this);return!!this.units[e]}return this.northWest.has(t,s)||this.northEast.has(t,s)||this.southWest.has(t,s)||this.southEast.has(t,s)}divide(){this.divided=!0;const t=this.bounds.size.x/2,e=this.bounds.size.y/2;this.northWest=new i({center:{x:this.bounds.center.x-t,y:this.bounds.center.y-e},size:{x:t,y:e}},this.options,this.depth+1),this.northEast=new i({center:{x:this.bounds.center.x+t,y:this.bounds.center.y-e},size:{x:t,y:e}},this.options,this.depth+1),this.southWest=new i({center:{x:this.bounds.center.x-t,y:this.bounds.center.y+e},size:{x:t,y:e}},this.options,this.depth+1),this.southEast=new i({center:{x:this.bounds.center.x+t,y:this.bounds.center.y+e},size:{x:t,y:e}},this.options,this.depth+1);for(const{vec:t,unit:e}of Object.values(this.units))this.northWest.add(t,e)||this.northEast.add(t,e)||this.southWest.add(t,e)||this.southEast.add(t,e);this.units={}}queryIteratable(e,i){const r="function"==typeof e?e:void 0;if(i&&!s.possiblelyOverlapsAABB(i,this.bounds))return[];if(!this.divided){let t=Object.values(this.units);return i&&(t=t.filter((t=>s.overlapsVec(i,t.vec)))),r?t.map(r):t}return r?t.toIterableWithMap(r,(()=>this.northWest.queryIteratable(i)),(()=>this.northEast.queryIteratable(i)),(()=>this.southWest.queryIteratable(i)),(()=>this.southEast.queryIteratable(i))):t.toIterable((()=>this.northWest.queryIteratable(i)),(()=>this.northEast.queryIteratable(i)),(()=>this.southWest.queryIteratable(i)),(()=>this.southEast.queryIteratable(i)))}_queryReduce(t,e,i){if(t&&!s.possiblelyOverlapsAABB(t,this.bounds))return i;if(!this.divided){let r=Object.values(this.units);return t&&(r=r.filter((e=>s.overlapsVec(t,e.vec)))),r.reduce(e,i)}let r=i;return r=this.northWest._queryReduce(t,e,r),r=this.northEast._queryReduce(t,e,r),r=this.southWest._queryReduce(t,e,r),r=this.southEast._queryReduce(t,e,r),r}queryReduce(t,e,s){return"function"==typeof t?this._queryReduce(void 0,t,e):this._queryReduce(t,e,s)}queryArray(t){return this._queryReduce(t,((t,e)=>(t.push(e),t)),[])}queryForEach(t,e){if("function"==typeof t)this._queryReduce(void 0,((e,s,i)=>t(s,i)));else{if(!e)return;this._queryReduce(t,((t,s,i)=>e(s,i)))}}queryMap(t,e){return"function"==typeof t?e?this._queryReduce(void 0,((e,s,i)=>(e.push(t(s,i)),e)),[]):[]:e?this._queryReduce(t,((t,s,i)=>(t.push(e(s,i)),t)),[]):[]}_dumpToString(t){const e="            ".substring(0,this.depth);if(!this.divided)return t.push(e),t.push(JSON.stringify(this.units)),t.push("\n"),t;for(const s of[{str:"NW",qt:this.northWest},{str:"NE",qt:this.northEast},{str:"SW",qt:this.southWest},{str:"SE",qt:this.southEast}])t.push(e),t.push(s.str),t.push(` (${s.qt.size}):\n`),s.qt._dumpToString(t);return t}toString(){return this._dumpToString([]).join("")}}class r extends Error{constructor(t){super(t)}}class n{static UniqueUnitAtVecKeyFunc=i.UniqueUnitAtPositionKeyFunc;quardTree;unitPositionGetter;constructor(t,e){this.quardTree=new i(t,e),this.unitPositionGetter=e.unitPositionGetter}get size(){return this.quardTree.size}add(t){const e=this.unitPositionGetter(t);if(!this.quardTree.add(e,t))throw new r(`position ${JSON.stringify(e)} is out of bounds: ${JSON.stringify(this.quardTree.bounds)}`);return this}move(t,e){return this.quardTree.move(this.unitPositionGetter(t),e,t)}delete(t){return this.quardTree.delete(this.unitPositionGetter(t),t)}has(t){return this.quardTree.has(this.unitPositionGetter(t),t)}clear(){this.quardTree.clear()}forEach(t){return this.quardTree.queryReduce(((e,s)=>t(s.unit,s.unit,this)))}entries(){return this.quardTree.queryIteratable((t=>[t.unit,t.unit]))}keys(){return this.values()}values(){return this.quardTree.queryIteratable((t=>t.unit))}get[Symbol.toStringTag](){return this.quardTree.toString()}[Symbol.iterator](){return this.values()}queryIteratable(t){return this.quardTree.queryIteratable(t)}queryReduce(t,e,s){return this.quardTree.queryReduce(t,e,s)}queryArray(t){return this.quardTree.queryArray(t)}queryForEach(t,e){this.quardTree.queryForEach(t,e)}queryMap(t,e){return this.quardTree.queryMap(t,e)}}return{QuadTree:i,QuadTreeSet:n,Shape:s,AABB:e,Collection:t}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
